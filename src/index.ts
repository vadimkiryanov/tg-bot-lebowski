import { Bot } from "grammy";
import { config } from "dotenv";
import { scheduleJob } from "node-schedule";

config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
const SEND_HOUR = 16;
const SEND_MINUTE = 0;

interface Debtor {
	username: string;
}

const bot = new Bot(process.env.TG_BOT_TOKEN || "");

const debtors: Debtor[] = [
	{ username: process.env.DEBTOR_1 || "" },
	{ username: process.env.DEBTOR_2 || "" },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(hours: number, minutes: number): string {
	const h = hours.toString().padStart(2, "0");
	const m = minutes.toString().padStart(2, "0");
	return `${h}:${m}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
function getTimeUntilNextMessage(): string {
	const now = new Date();
	const targetTime = new Date();

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
	targetTime.setUTCHours(SEND_HOUR - 3, SEND_MINUTE, 0, 0); // –ú–°–ö = UTC+3

	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
	if (now > targetTime) {
		targetTime.setDate(targetTime.getDate() + 1);
	}

	const diff = targetTime.getTime() - now.getTime();
	const hours = Math.floor(diff / (1000 * 60 * 60));
	const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

	return `${formatTime(hours, minutes)}`;
}

async function sendDebtReminder() {
	const chatId = process.env.TG_CHAT_ID;
	const stickerFileId = process.env.TG_STICKER_FILE_ID;

	if (!chatId || !stickerFileId) {
		console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
		return;
	}

	for (const debtor of debtors) {
		if (!debtor.username) continue;

		const message = `–ö–∞–∫ –¥–µ–ª–∞, <a href="https://t.me/${debtor.username}">–õ–µ–±–æ–≤—Å–∫–∏</a>?`;

		try {
			await bot.api.sendMessage(chatId, message, {
				parse_mode: "HTML",
				link_preview_options: { is_disabled: true },
			});

			await bot.api.sendSticker(chatId, stickerFileId);
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${debtor.username}:`, error);
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function sendLogMessage(message: string) {
	const logChatId = process.env.TG_CHAT_ID_LOGS;
	if (!logChatId) {
		console.error("–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è");
		return;
	}

	try {
		await bot.api.sendMessage(logChatId, message, {
			parse_mode: "Markdown",
			link_preview_options: { is_disabled: true },
		});
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
scheduleJob(
	{
		hour: SEND_HOUR,
		minute: SEND_MINUTE,
		tz: "Europe/Moscow",
	},
	sendDebtReminder
);

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
const timeUntilNext = getTimeUntilNextMessage();
const startMessage =
	`ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!*\n\n` +
	`‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: ${timeUntilNext}\n` +
	`–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: https://web.telegram.org/k/#-${process.env.TG_CHAT_ID?.slice(4)}\n` +
	`‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${formatTime(SEND_HOUR, SEND_MINUTE)} –ø–æ –ú–°–ö\n`;

sendLogMessage(startMessage);

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
